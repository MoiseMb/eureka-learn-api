generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role {
  PROFESSOR
  STUDENT
  ADMIN
}

model User {
  id          Int          @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String       @unique
  password    String
  role        Role         @default(STUDENT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  subjects    Subject[]    @relation("UserSubjects")
  submissions Submission[]
  classroom   Classroom?   @relation("ClassroomStudents", fields: [classroomId], references: [id])
  classroomId Int?
  teaching    Classroom[]  @relation("ClassroomTeacher")
}

enum EvaluationType {
  POO_JAVA
  C_LANGUAGE
  SQL
  PYTHON
  ALGORITHMS
  DATA_STRUCTURES
}

enum SubjectType {
  PDF
  TEXT
  MARKDOWN
}

model Subject {
  id             Int            @id @default(autoincrement())
  title          String
  description    String?
  fileUrl        String
  startDate      DateTime
  endDate        DateTime
  evaluationType EvaluationType
  type           SubjectType    @default(PDF)
  teacher        User           @relation("UserSubjects", fields: [teacherId], references: [id])
  teacherId      Int
  classroom      Classroom      @relation(fields: [classroomId], references: [id])
  classroomId    Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  submissions    Submission[]
}

model Submission {
  id          Int         @id @default(autoincrement())
  fileUrl     String
  submittedAt DateTime    @default(now())
  // Relations
  student     User        @relation(fields: [studentId], references: [id])
  studentId   Int
  subject     Subject     @relation(fields: [subjectId], references: [id])
  subjectId   Int
  correction  Correction?
}

model Correction {
  id             Int            @id @default(autoincrement())
  score          Float?
  correctedAt    DateTime       @default(now())
  notes          String?
  evaluationType EvaluationType
  submission     Submission     @relation(fields: [submissionId], references: [id])
  submissionId   Int            @unique
}

model Classroom {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  students    User[]    @relation("ClassroomStudents")
  teacher     User?     @relation("ClassroomTeacher", fields: [teacherId], references: [id])
  teacherId   Int?
  Subject     Subject[]
}
